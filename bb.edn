{:paths ["src/clj"]
 :deps {metosin/malli {:mvn/version "0.13.0"}}
 :tasks {:requires [[babashka.process :as p]
                    [automaton-build-app.tasks.clean :as build-clean]
                    [automaton-build-app.tasks.publication :as build-publication]
                    [automaton-build-app.tasks.test :as build-test]
                    [automaton-build-app.log :as build-log]
                    [automaton-build-app.tasks.doc :as build-doc]
                    [automaton-build-app.tasks.code-helpers :as build-code-helpers]
                    [babashka.fs :as fs]]
         :init (do
                 (defn- cicd?
                   []
                   (System/getenv "CI"))

                 (defn wrap-fn
                   "Run the function and manage
                    Params:
                    * `body` body to execute"
                   [body-fn]
                   (try
                     (body-fn)
                     (catch Exception e
                       (println (format "Error during execution of `%s`, %s`" (:name (current-task)) (pr-str (ex-message e))))
                       (if (cicd?)
                         (println e)
                         (let [file (fs/create-temp-file {:suffix ".edn"})]
                           (println (format "See details in `%s`" (.toString (.toAbsolutePath file))))
                           (spit (fs/file file) (prn-str e))
                           ""))
                       (System/exit 1))))

                 (defn ltest []
                   (build-test/ltest :env-development-test
                                     :common-test)
                   (build-code-helpers/lint (= "-d" (first *command-line-args*))
                                            "src/clj"
                                            "test/clj")))

         blog {:doc "Transforms md file to pdf based on edn file"
               :task (build-doc/blog-task)}

         clean {:doc "Clean cache files for compiles, and logs"
                :task (wrap-fn (partial build-clean/clean
                                        ".cpcache"
                                        ".clj-kondo/.cache"
                                        "tmp"))}
         clean-hard {:doc "Clean all files which are not under version control (it doesn't remove untracked file or staged files if there are eligible to `git add .`)"
                     :task (wrap-fn build-clean/clean-hard)}

         code-doc {:doc "Create the documentation of the app"
                   :task (wrap-fn build-code-helpers/code-doc)}

         compile-to-jar {:doc "Compile that code to a jar"
                         :task (wrap-fn build-)
                  }

         gha {:doc "Github action command - is launched automatically by github"
              :task (if (or (System/getenv "CI")
                            (= "-f"
                               (first *command-line-args*)))
                      (ltest)
                      (build-log/error "This task if for CI, use `bb ltest` instead (or -f to force it to test it locally)"))}

         gha-lconnect {:doc "Connect to a local container running this code"
                       :task (wrap-fn (partial build-test/gha-lconnect))}

         lconnect {:doc "Local connect - repl"
                   :task (wrap-fn (partial build-code-helpers/lconnect :common-test :env-development-repl))}

         ltest {:doc "Local test"
                :task (wrap-fn ltest)}

         push {:doc "Push this repo"
               :task (wrap-fn (partial build-publication/push-from-local (first *command-line-args*)))}

         update-deps {:doc "Update the dependencies, cider-nrepl and refactor are to be updated manually"
                      :task (wrap-fn build-code-helpers/update-deps)}}}
